From e28906208b4f461e4c3ff6b67768c773f397f52d Mon Sep 17 00:00:00 2001
From: Giulio Camuffo <giuliocamuffo@gmail.com>
Date: Sun, 3 May 2015 12:23:42 +0300
Subject: [PATCH 2/4] Throttle the set_gamma requests

---
 src/gamma-wl.c | 30 ++++++++++++++++++++++++++++++
 src/gamma-wl.h |  1 +
 2 files changed, 31 insertions(+)

diff --git a/src/gamma-wl.c b/src/gamma-wl.c
index 7c46a46..ffba67d 100644
--- a/src/gamma-wl.c
+++ b/src/gamma-wl.c
@@ -171,6 +171,9 @@ wayland_free(wayland_state_t *state)
 	gamma_control_manager_destroy(state->gamma_control_manager);
 	wl_registry_destroy(state->registry);
 	wl_display_disconnect(state->display);
+	if (state->callback) {
+		wl_callback_destroy(state->callback);
+	}
 }
 
 void
@@ -186,9 +189,22 @@ wayland_set_option(wayland_state_t *state, const char *key, const char *value)
 	return 0;
 }
 
+static void
+callback_done(void *data, struct wl_callback *cb, uint32_t t)
+{
+	wayland_state_t *state = data;
+	state->callback = NULL;
+	wl_callback_destroy(cb);
+}
+
+static const struct wl_callback_listener callback_listener = {
+	callback_done
+};
+
 int
 wayland_set_temperature(wayland_state_t *state, const color_setting_t *setting)
 {
+	int ret = 0;
 	struct wl_array red;
 	struct wl_array green;
 	struct wl_array blue;
@@ -196,6 +212,18 @@ wayland_set_temperature(wayland_state_t *state, const color_setting_t *setting)
 	uint16_t *g_gamma = NULL;
 	uint16_t *b_gamma = NULL;
 
+	/* We wait for the sync callback to throttle a bit and not send more
+	 * requests than the compositor can manage, otherwise we'd get disconnected.
+	 * This also allows us to dispatch other incoming events such as
+	 * wl_registry.global_remove. */
+	while (state->callback && ret >= 0) {
+		ret = wl_display_dispatch(state->display);
+	}
+	if (ret < 0) {
+		fprintf(stderr, _("The Wayland connection experienced a fatal error: %d\n"), ret);
+		return ret;
+	}
+
 	wl_array_init(&red);
 	wl_array_init(&green);
 	wl_array_init(&blue);
@@ -236,6 +264,8 @@ wayland_set_temperature(wayland_state_t *state, const color_setting_t *setting)
 		gamma_control_set_gamma(output->gamma_control, &red, &green, &blue);
 	}
 
+	state->callback = wl_display_sync(state->display);
+	wl_callback_add_listener(state->callback, &callback_listener, state);
 	wl_display_flush(state->display);
 
 	wl_array_release(&red);
diff --git a/src/gamma-wl.h b/src/gamma-wl.h
index dd7d99a..bdda490 100644
--- a/src/gamma-wl.h
+++ b/src/gamma-wl.h
@@ -29,6 +29,7 @@
 typedef struct {
 	struct wl_display *display;
 	struct wl_registry *registry;
+	struct wl_callback *callback;
 	uint32_t gamma_control_manager_id;
 	struct gamma_control_manager *gamma_control_manager;
 	int num_outputs;
-- 
2.10.2

